<?php
 namespace App\Services; use App\Models\ApiSync; use App\Models\Store; use Illuminate\Console\Scheduling\Schedule; class ApiSyncService { static function eachSyncIn(callable $callback) { $collection = ApiSync::query()->where("\163\x74\141\164\165\163", "\x31")->where("\x64\x69\x72\145\x63\x74\151\157\x6e", "\x69\x6e")->get(); foreach ($collection as $k => $item) { $callback($item); } } static function eachSyncOut(callable $callback) { $collection = ApiSync::query()->where("\163\164\141\164\165\x73", "\61")->where("\x64\151\162\145\143\x74\151\157\x6e", "\157\165\164")->get(); foreach ($collection as $k => $item) { $callback($item); } } static function syncApiFacadeIn(Schedule $schedule) { self::eachSyncIn(function ($item) use($schedule) { $apiId = $item->api_id; $storeId = $item->store_id; $frequency = $item->frequency_time; $response = CurlService::runApi($apiId); $response = $response["\x72\x65\x73\x70\157\156\163\145"]; $schedule->call(function () use($storeId, $response) { StoreService::saveToStoreById($storeId, $response); })->{$frequency}()->withoutOverlapping(); }); } static function syncApiFacadeOut(Schedule $schedule) { self::eachSyncOut(function ($item) use($schedule) { $apiId = $item->api_id; $storeId = $item->store_id; $frequency = $item->frequency_time; $schedule->call(function () use($storeId, $apiId) { $storeContent = StoreService::getStoreContentById($storeId); $storeContent = json_decode($storeContent, true); foreach ($storeContent as $input) { $response = CurlService::runApi($apiId, $input); } })->{$frequency}(); }); } static function eachValidSyncRecords(callable $callback) { $collection = ApiSync::query()->where("\163\x74\141\x74\x75\x73", "\61")->get(); foreach ($collection as $k => $item) { $callback($k, $item); } } static function sync(Schedule $schedule) { self::eachValidSyncRecords(function ($key, $item) use($schedule) { $frequency = $item->frequency_time; $schedule->call(function () use($item) { $api = ApiService::callApi($item->api_id); $pivot = $item->pivot; $response = $api["\162\x65\163\x70\157\x6e\x73\145"]; if ($pivot != "\x72\x6f\157\164") { $response = $response[$pivot]; } StoreService::writeToStore($item->store_id, json_encode($response)); })->name($item->name)->{$frequency}()->withoutOverlapping(); }); } } ?>