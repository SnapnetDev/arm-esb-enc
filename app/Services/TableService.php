<?php
 namespace App\Services; use App\Models\Table; use Carbon\Carbon; use Illuminate\Database\Schema\Blueprint; use Illuminate\Support\Facades\DB; use Illuminate\Support\Facades\Schema; use Illuminate\Support\Facades\Storage; class TableService { const TABLE_PREFIX = "\x54\102\114\x5f"; static function insert($tableId, $content) { $tableFields = self::getTableFields($tableId); $data = array(); $uniqueField = self::getUniqueField($tableId); foreach ($tableFields as $field) { $data[$field] = $content[$field]; } $record = Table::query()->find($tableId); $tableName = self::TABLE_PREFIX . $record->name; if (!empty($uniqueField)) { $check = DB::table($tableName)->where($uniqueField, $data[$uniqueField]); if (!$check->exists()) { if (!isset($data["\143\x72\145\141\164\145\144\137\x61\164"])) { $date = Carbon::now()->toDateString(); $data["\x63\162\145\141\164\x65\x64\137\141\x74"] = $date; $data["\x75\160\x64\141\x74\x65\144\137\141\x74"] = $date; } DB::table($tableName)->insert($data); return; } $date = Carbon::now()->toDateString(); $data["\x75\x70\x64\x61\x74\145\x64\x5f\x61\x74"] = $date; $check->update($data); return; } if (!isset($data["\x63\162\145\141\164\145\x64\137\x61\164"])) { $date = Carbon::now()->toDateString(); $data["\x63\162\x65\x61\x74\x65\144\x5f\x61\x74"] = $date; $data["\x75\x70\144\x61\x74\145\x64\x5f\x61\164"] = $date; } DB::table($tableName)->insert($data); } static function getUniqueField($tableId) { $uniqueField = ''; self::eachField($tableId, function ($field, $type, $mod) use(&$uniqueField) { if ($mod == "\165\x6e\x69\x71\165\145") { $uniqueField = $field; } }); return $uniqueField; } static function eachField($tableId, callable $callback) { $record = Table::query()->find($tableId); $fields = $record->fields; $fields = self::decodeFields($fields); foreach ($fields as $field => $item) { $field = $item["\146\151\145\154\x64"]; $type = $item["\164\171\x70\x65"]; $mod = $item["\x6d\x6f\x64"]; $callback($field, $type, $mod); } } static function getTableFields($tableId) { $r = array(); self::eachField($tableId, function ($field, $type, $mod) use(&$r) { $r[] = $field; }); return $r; } static function decodeFields($fields) { $r = explode("\54", $fields); $fieldConfig = array(); foreach ($r as $k => $item) { $list = explode("\x3a", $item); if (count($list) <= 2) { $list[] = "\156\157\x6e\x65"; } list($field, $type, $mod) = $list; $fieldConfig[$field] = array("\146\151\145\154\x64" => $field, "\x74\171\x70\145" => $type, "\155\x6f\x64" => $mod); } return $fieldConfig; } static function createTableOnDb($name, $fields) { $fieldConfig = self::decodeFields($fields); Schema::create(self::TABLE_PREFIX . $name, function (Blueprint $table) use($fieldConfig) { $table->id(); foreach ($fieldConfig as $k => $item) { $field = $item["\146\151\145\x6c\144"]; $type = $item["\164\171\x70\x65"]; $table->{$type}($field)->nullable(); } $table->timestamps(); }); } static function addTableFieldsOnDb($name, $fields) { $fieldConfig = self::decodeFields($fields); Schema::table(self::TABLE_PREFIX . $name, function (Blueprint $table) use($fieldConfig) { foreach ($fieldConfig as $k => $item) { $field = $item["\146\151\145\154\x64"]; $type = $item["\164\171\160\145"]; $table->{$type}($field)->nullable(); } }); } static function deductFields($fields, $fieldsDeduct) { $fields = self::decodeFields($fields); $fieldsDeduct = self::decodeFields($fieldsDeduct); $newFields = array(); foreach ($fields as $field => $item) { if (!isset($fieldsDeduct[$field])) { $newFields[$field] = $item; } } $r = array(); foreach ($newFields as $field => $item) { $r[] = $item["\x66\151\x65\154\x64"] . "\x3a" . $item["\x74\x79\160\x65"] . "\72" . $item["\155\157\x64"]; } return implode("\54", $r); } static function addFields($fields, $fieldsAdd) { $fields = self::decodeFields($fields); $fieldsAdd = self::decodeFields($fieldsAdd); $newFields = array(); foreach ($fieldsAdd as $field => $item) { $fields[$field] = $item; } $r = array(); foreach ($fields as $field => $item) { $r[] = $item["\x66\x69\145\x6c\144"] . "\72" . $item["\x74\171\160\x65"] . "\72" . $item["\x6d\157\x64"]; } return implode("\x2c", $r); } static function fieldExists($fields, $fieldsAdd) { $fields = self::decodeFields($fields); $fieldsAdd = self::decodeFields($fieldsAdd); $found = false; foreach ($fieldsAdd as $field => $item) { if (isset($fields[$field])) { $found = true; } } return $found; } static function removeTableFieldsOnDb($name, $fields) { $fieldConfig = self::decodeFields($fields); Schema::table(self::TABLE_PREFIX . $name, function (Blueprint $table) use($fieldConfig) { foreach ($fieldConfig as $k => $item) { $field = $item["\146\x69\145\x6c\144"]; $type = $item["\164\171\x70\145"]; $table->dropColumn($field); } }); } static function removeTable($name) { Schema::dropIfExists(self::TABLE_PREFIX . $name); } static function getTableById($id) { return Table::query()->find($id); } static function getLock($store) { $r = Storage::disk("\x70\165\x62\x6c\x69\143\x2d\x73\x74\x6f\x72\145\163")->get($store . "\55\154\157\143\x6b\x2e\152\x73\157\156"); $r = json_decode($r, true); return $r; } static function locked($store) { if (!self::lockExists($store)) { self::unlock($store); } $r = self::getLock($store); return $r["\x6c\157\x63\153\145\x64"] == 1; } static function lockExists($store) { return Storage::disk("\x70\165\x62\154\151\143\x2d\x73\x74\157\x72\145\x73")->exists($store . "\x2d\154\x6f\143\x6b\56\152\x73\x6f\156"); } static function lock($store) { Storage::disk("\x70\165\142\x6c\x69\143\55\x73\x74\x6f\162\145\163")->put($store . "\x2d\154\x6f\143\x6b\56\152\163\157\x6e", json_encode(array("\154\x6f\143\153\x65\144" => 1))); } static function unlock($store) { Storage::disk("\x70\165\x62\x6c\x69\x63\55\163\x74\x6f\x72\x65\163")->put($store . "\x2d\x6c\157\x63\x6b\56\152\163\157\156", json_encode(array("\154\157\x63\x6b\x65\144" => 0))); } static function trackerExists($store) { return Storage::disk("\160\165\x62\x6c\x69\143\x2d\x73\164\x6f\162\145\x73")->exists($store . "\55\164\162\x61\x63\153\145\162\56\152\x73\157\156"); } static function setTracker($store, $index) { Storage::disk("\160\x75\142\x6c\151\x63\x2d\x73\164\157\x72\145\163")->put($store . "\x2d\164\x72\x61\143\153\145\162\56\152\x73\x6f\x6e", json_encode(array("\151\x6e\x64\145\170" => $index))); } static function getTracker($store) { if (!self::trackerExists($store)) { self::setTracker($store, 0); } $r = Storage::disk("\x70\x75\x62\x6c\x69\143\x2d\x73\x74\157\x72\x65\163")->get($store . "\55\164\162\x61\143\x6b\145\x72\56\x6a\x73\157\156"); $r = json_decode($r, true); return $r["\x69\156\x64\145\170"]; } static function debug($store, $data) { Storage::disk("\160\x75\142\154\151\143\55\x73\164\x6f\x72\145\163")->put($store . "\55\144\x65\142\x75\x67\56\x6a\x73\157\156", json_encode(array("\151\x6e\x64\145\x78" => $data))); } static function chunk($tableId, $chunk, $storeName, callable $callback) { if (self::locked($storeName)) { return; } self::lock($storeName); $startId = self::getTracker($storeName); self::debug($storeName, $startId); $table = self::getTableById($tableId); self::debug($storeName, $table); $tableName = self::TABLE_PREFIX . $table->name; self::debug($storeName, $tableName); DB::table($tableName)->where("\x69\x64", "\x3e", $startId)->orderBy("\151\144", "\x61\163\143")->chunkById($chunk, function ($collection) use($callback, $storeName) { foreach ($collection as $record) { self::debug($storeName, $record); $callback($record); self::setTracker($storeName, $record->id); } }); self::unlock($storeName); } static function getTableRecords($tableId, $limit = 10, $skip = 0) { $table = self::getTableById($tableId); $tableName = self::TABLE_PREFIX . $table->name; return DB::table($tableName)->skip($skip)->take($limit)->get(); } static function getTableRecordCount($tableId) { $table = self::getTableById($tableId); $tableName = self::TABLE_PREFIX . $table->name; return DB::table($tableName)->count(); } static function getSchemaWithData($tableId, $limit = 10, $skip = 0) { $fields = self::getTableFields($tableId); $records = self::getTableRecords($tableId, $limit, $skip); $count = self::getTableRecordCount($tableId); return array("\146\x69\x65\154\x64\163" => $fields, "\162\145\x63\x6f\162\144\x73" => $records, "\143\157\x75\x6e\x74" => $count); } } ?>