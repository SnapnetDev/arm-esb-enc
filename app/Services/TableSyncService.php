<?php
 namespace App\Services; use App\Models\TableSync; use Illuminate\Console\Scheduling\Schedule; use Illuminate\Support\Facades\Storage; class TableSyncService { static function eachValidSync(callable $callable) { $records = TableSync::query()->where("\163\164\141\164\x75\163", 1)->get(); foreach ($records as $k => $v) { $callable($k, $v); } } static function getTableSyncById($id) { return TableSync::query()->find($id); } static function debug($store, $data) { Storage::disk("\x70\165\142\154\x69\143\55\163\164\157\x72\x65\163")->put($store . "\x2d\144\145\142\x75\147\56\152\163\157\156", json_encode(array("\151\156\x64\145\x78\61" => $data))); } static function sync(Schedule $schedule) { self::eachValidSync(function ($key, $record) use($schedule) { $frequency = $record->frequency_time; $schedule->call(function () use($record) { $storeName = $record->tracker_name; $chunk = $record->chunk_size; self::debug("\x72\145\x6c\x61\x79\55\144\x65\x62\165\x67\56\x6a\163\157\x6e", $chunk); TableService::chunk($record->table_id, $chunk, $storeName, function ($tableRecord) use($record) { self::debug("\162\145\154\x61\x79\x2d\144\x65\x62\x75\x67", $tableRecord); $tableRecord = json_encode($tableRecord); $tableRecord = json_decode($tableRecord, true); ApiService::callApi($record->api_id, $tableRecord); }); })->name($record->name)->{$frequency}()->withoutOverlapping(); }); } } ?>