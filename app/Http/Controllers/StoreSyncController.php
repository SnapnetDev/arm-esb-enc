<?php
 namespace App\Http\Controllers; use App\Models\StoreSync; use Illuminate\Http\Request; use Illuminate\Validation\ValidationException; class StoreSyncController extends Controller { public function index() { return $this->resource(StoreSync::query()->get()); } public function create() { } public function store(Request $request) { try { $data = request()->validate(array("\x6e\x61\x6d\x65" => "\x72\x65\x71\165\x69\x72\x65\x64", "\x74\x61\142\154\x65\137\x69\144" => "\162\x65\x71\x75\x69\162\x65\144", "\163\x74\x6f\162\x65\x5f\x69\x64" => "\162\145\x71\x75\x69\162\x65\144", "\146\162\x65\161\165\145\x6e\x63\171\x5f\x74\x69\155\x65" => "\162\145\x71\165\x69\162\145\x64")); $data["\x73\x74\141\164\165\163"] = 0; $new = new StoreSync(); $new->create($data); return array("\x6d\145\x73\163\x61\147\x65" => "\116\145\x77\x20\123\164\x6f\x72\145\55\123\171\x6e\x63\x20\x52\145\147\x69\163\x74\145\162\x72\x65\144", "\x65\162\x72\157\162" => false, "\x64\x61\164\141" => $new); } catch (ValidationException $ex) { return $this->validationErrors($ex); } } public function show(StoreSync $storeSync) { } public function edit(StoreSync $storeSync) { } public function update(Request $request, $id) { try { $data = request()->validate(array("\x6e\141\x6d\x65" => "\x72\145\x71\x75\151\x72\x65\144", "\x74\141\142\x6c\x65\x5f\151\144" => "\162\x65\161\165\151\162\145\144", "\x73\x74\x6f\x72\x65\137\x69\144" => "\162\145\x71\x75\151\x72\x65\144", "\146\162\145\161\165\x65\156\143\x79\137\164\x69\x6d\x65" => "\162\x65\161\165\x69\162\x65\x64", "\x73\164\x61\x74\165\163" => "\162\x65\x71\x75\151\162\x65\x64")); $record = StoreSync::query()->find($id); $record->update($data); return array("\x6d\145\x73\x73\x61\x67\145" => "\123\164\x6f\162\145\x2d\123\171\156\143\40\x55\x70\x64\141\x74\x65\144", "\145\x72\x72\x6f\x72" => false, "\x64\x61\x74\x61" => $record); } catch (ValidationException $ex) { return $this->validationErrors($ex); } } public function destroy($id) { $record = StoreSync::query()->find($id); $record->delete(); return array("\155\145\163\163\x61\x67\145" => "\123\164\x6f\x72\x65\40\x53\171\x6e\x63\40\122\x65\x6d\x6f\x76\145\x64", "\x65\x72\x72\157\162" => false, "\x64\x61\164\141" => $record); } } ?>