<?php
 namespace App\Http\Controllers; use App\Models\Category; use Exception; use Illuminate\Http\Request; use Illuminate\Validation\ValidationException; use PhpParser\Node\Stmt\TryCatch; class CategoryController extends Controller { public function index() { return $this->resource(Category::query()->get()); } public function create() { } public function store(Request $request) { try { $data = request()->validate(array("\156\141\155\x65" => "\x72\x65\161\165\x69\x72\145\x64")); $new = new Category(); $new = $new->create($data); return array("\x6d\145\163\163\141\x67\x65" => "\x4e\x65\x77\40\103\141\164\145\x67\x6f\x72\171\40\x41\144\144\x65\144", "\x65\x72\x72\157\162" => false, "\x64\141\164\141" => $new); } catch (ValidationException $ex) { return $this->validationErrors($ex); } } public function show(Category $category) { } public function edit(Category $category) { } public function update(Request $request, $id) { try { $record = Category::query()->find($id); $data = request()->validate(array("\x6e\141\155\145" => "\162\x65\x71\x75\x69\162\145\x64")); $record->update($data); return array("\155\x65\x73\163\141\x67\145" => "\103\141\164\145\147\157\162\171\x20\x53\141\x76\x65\x64", "\145\162\x72\157\x72" => false, "\x64\x61\164\141" => $record); } catch (ValidationException $ex) { return $this->validationErrors($ex); } } public function destroy($id) { $record = Category::query()->find($id); $record->delete(); return array("\155\x65\x73\x73\141\147\x65" => "\x43\x61\x74\145\x67\x6f\162\x79\x20\x72\145\x6d\157\x76\x65\144", "\x65\162\x72\157\x72" => false, "\144\x61\164\x61" => $record); } } ?>